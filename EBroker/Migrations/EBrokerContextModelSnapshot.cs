// <auto-generated />
using EBroker.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using System.Diagnostics.CodeAnalysis;

namespace EBroker.Migrations
{
    [ExcludeFromCodeCoverage]
    [DbContext(typeof(EBrokerContext))]
    partial class EBrokerContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 63)
                .HasAnnotation("ProductVersion", "5.0.10")
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

            modelBuilder.Entity("EBroker.Data.Entities.Equity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<double>("UnitPrice")
                        .HasColumnType("double precision");

                    b.HasKey("Id");

                    b.ToTable("Equity");

                    b.HasData(
                        new
                        {
                            Id = 12,
                            Name = "Tata Motors",
                            UnitPrice = 445.55000000000001
                        },
                        new
                        {
                            Id = 14,
                            Name = "Indusind Bank Ltd",
                            UnitPrice = 848.0
                        },
                        new
                        {
                            Id = 15,
                            Name = "HDFC Bank",
                            UnitPrice = 1424.5
                        },
                        new
                        {
                            Id = 23,
                            Name = "Reliance Industries Ltd",
                            UnitPrice = 2276.8000000000002
                        },
                        new
                        {
                            Id = 45,
                            Name = "Rain Industries Ltd",
                            UnitPrice = 200.5
                        },
                        new
                        {
                            Id = 67,
                            Name = "Goa Carbon Ltd",
                            UnitPrice = 311.94999999999999
                        });
                });

            modelBuilder.Entity("EBroker.Data.Entities.Trader", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<double>("Funds")
                        .HasColumnType("double precision");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Trader");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Funds = 4500.5,
                            Name = "Abhi"
                        },
                        new
                        {
                            Id = 2,
                            Funds = 1234.0,
                            Name = "Saurav"
                        },
                        new
                        {
                            Id = 3,
                            Funds = 4500.5,
                            Name = "Ashwani"
                        },
                        new
                        {
                            Id = 4,
                            Funds = 2319.0,
                            Name = "GuptaJi"
                        },
                        new
                        {
                            Id = 5,
                            Funds = 8344.0,
                            Name = "Arshbeer"
                        },
                        new
                        {
                            Id = 6,
                            Funds = 9000.0,
                            Name = "Saurav"
                        });
                });

            modelBuilder.Entity("EBroker.Data.Entities.TraderHolding", b =>
                {
                    b.Property<int>("TraderId")
                        .HasColumnType("integer");

                    b.Property<int>("EquityId")
                        .HasColumnType("integer");

                    b.Property<int>("UnitHoldings")
                        .HasColumnType("integer");

                    b.HasKey("TraderId", "EquityId");

                    b.HasIndex("EquityId");

                    b.ToTable("TraderHolding");
                });

            modelBuilder.Entity("EBroker.Data.Entities.TraderTransaction", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("EquityId")
                        .HasColumnType("integer");

                    b.Property<int>("TraderAction")
                        .HasColumnType("integer");

                    b.Property<int>("TraderId")
                        .HasColumnType("integer");

                    b.Property<int>("TransactionUnits")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("EquityId");

                    b.HasIndex("TraderId");

                    b.ToTable("TraderTransaction");
                });

            modelBuilder.Entity("EBroker.Data.Entities.TraderHolding", b =>
                {
                    b.HasOne("EBroker.Data.Entities.Equity", null)
                        .WithMany("TradeHoldings")
                        .HasForeignKey("EquityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EBroker.Data.Entities.Trader", null)
                        .WithMany("TradeHoldings")
                        .HasForeignKey("TraderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("EBroker.Data.Entities.TraderTransaction", b =>
                {
                    b.HasOne("EBroker.Data.Entities.Equity", null)
                        .WithMany("TradeTransactions")
                        .HasForeignKey("EquityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EBroker.Data.Entities.Trader", null)
                        .WithMany("TradeTransactions")
                        .HasForeignKey("TraderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("EBroker.Data.Entities.Equity", b =>
                {
                    b.Navigation("TradeHoldings");

                    b.Navigation("TradeTransactions");
                });

            modelBuilder.Entity("EBroker.Data.Entities.Trader", b =>
                {
                    b.Navigation("TradeHoldings");

                    b.Navigation("TradeTransactions");
                });
#pragma warning restore 612, 618
        }
    }
}
